var twitterAPI = require("./index.js");

var fs = require("fs");

var twitter = new twitterAPI({
    consumerKey: 'b3S1pjDyzSB83vYx9rddVg',
    consumerSecret: 'CwE844uxXsKb1fEHZts2ua10Qjk56oyJqhCSPEd5cA',
    callback: 'oob'
});

/*
twitter.getRequestToken(function(error, requestToken, requestTokenSecret, results){
    if (error) {
        console.log(error);
    } else {
        //store token and tokenSecret somewhere, you'll need them later; redirect user
		console.log("https://twitter.com/oauth/authenticate?oauth_token=" + requestToken);
		console.log(requestToken);
		console.log(requestTokenSecret);
    }
});*/


var requestToken = "_LdZ_AAAAAAAE9XOAAABUidBHZk";
var requestTokenSecret = "JLqVufAXe12M9UrFqHgmhwhCpvqH2HkG";


/*
twitter.getAccessToken(requestToken, requestTokenSecret, 7132519, function(error, accessToken, accessTokenSecret, results) {
    if (error) {
        console.log(error);
    } else {
		console.log(accessToken);
		console.log(accessTokenSecret);
        //store accessToken and accessTokenSecret somewhere (associated to the user)
        //Step 4: Verify Credentials belongs here
		twitter.verifyCredentials(accessToken, accessTokenSecret, function(error, data, response) {
			if (error) {
				//something was wrong with either accessToken or accessTokenSecret
				//start over with Step 1
			} else {
				//accessToken and accessTokenSecret can now be used to make api-calls (not yet implemented)
				//data contains the user-data described in the official Twitter-API-docs
				//you could e.g. display his screen_name
				console.log(data["screen_name"]);
                console.log(data["email"]);
				console.log(response);
			}
		});
    }
});*/



var accessToken = "56701719-bknqBPcWZO6ILBFyUhDPYqbm4K8wEH0skosGowefH";
var accessTokenSecret = "NrPiEEmk9Wepi6Xvqpgb1PD9qiqU9GmpuDsKY4V7N101C";


twitter.verifyCredentials(accessToken, accessTokenSecret, {"skip_status": true}, function(error, data,  response) {
    if (error) {
        //something was wrong with either accessToken or accessTokenSecret
        //start over with Step 1
    } else {
        //accessToken and accessTokenSecret can now be used to make api-calls (not yet implemented)
        //data contains the user-data described in the official Twitter-API-docs
        //you could e.g. display his screen_name
        console.log(data["screen_name"]);
        console.log(data["status"]);
        console.log(response);
    }
});

/*
twitter.uploadMedia({
    media: "/home/renner/Dokumente/test.jpg"
}, accessToken, accessTokenSecret, function(err, data, res) {
    console.log(data);
});

twitter.uploadMedia({
    media: "/home/renner/Dokumente/test.png"
}, accessToken, accessTokenSecret, function(err, data, res) {
    console.log(data);
});
*/

/*
twitter.statuses("oembed", {id: "507185938620219395"}, accessToken, accessTokenSecret, function(err, data, res) {
    console.log(err);
	console.log(data);
	//console.log(res);
});*/

function base64_encode(file) {
    // read binary data
    var bitmap = fs.readFileSync(file);
    // convert binary data to base64 encoded string
    return new Buffer(bitmap).toString('base64');
}

/*
twitter.uploadMedia({
    media: base64_encode("/home/renner/Dokumente/test.gif"),
    isBase64: true
}, accessToken, accessTokenSecret, function(err, data, res) {
    console.log(data);
});
*/

/*
var mediaId = 591296130014703600;

var ids = "591298477080109057,591298477252075521,591298478388682752";

twitter.statuses("update", {
    status: "Hi."//,
    //media_ids: ids
}, accessToken, accessTokenSecret, function(err, data, res) {
    console.log(err);
    console.log(data);
    console.log(res);
    setTimeout(function() {
        twitter.statuses("destroy", {
            id: data.id
        }, accessToken, accessTokenSecret, function(err, data, res) {
            console.log(err);
            console.log(data);
            console.log(res);
        });
    }, 10000);
});


twitter.rateLimitStatus({}, accessToken, accessTokenSecret, function(err, data, res) {
	console.log(err);
	console.log(data);
	console.log(res);
});
*/
