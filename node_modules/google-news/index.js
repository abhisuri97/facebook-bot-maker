// Generated by CoffeeScript 1.9.1
(function() {
  var EventEmitter, FeedParser, GoogleNews, Loki, URLHash, extend, request, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  util = require('util');

  request = require('request');

  extend = require('deep-extend');

  URLHash = require('nx-url-hash');

  Loki = require('lokijs');

  FeedParser = require('feedparser');

  EventEmitter = require('events').EventEmitter;

  GoogleNews = (function() {
    GoogleNews.DATA = 'google.news.data';

    GoogleNews.ERROR = 'google.news.error';

    GoogleNews.ATOM = 'atom';

    GoogleNews.RSS = 'rss';

    function GoogleNews(options) {
      if (options == null) {
        options = {};
      }
      this.options = extend({}, {
        cacheFileName: 'google-news.json',
        host: 'news.google.com',
        service: 'news/feeds',
        pollInterval: 1000 * 60 * 15,
        protocol: 'https',
        params: {
          cf: 'all',
          hl: 'en',
          lang: 'en',
          output: GoogleNews.ATOM
        }
      }, options);
      this.cacheProvider = new Loki(options.cacheFileName);
      this.urlHash = new URLHash();
    }

    GoogleNews.prototype.stream = function(track, callback) {
      var GoogleNewsStream, stream;
      GoogleNewsStream = (function() {
        util.inherits(GoogleNewsStream, EventEmitter);

        function GoogleNewsStream(context, track) {
          this.generateGuid = bind(this.generateGuid, this);
          this.onError = bind(this.onError, this);
          this.onData = bind(this.onData, this);
          this.disconnect = bind(this.disconnect, this);
          this.connect = bind(this.connect, this);
          this.context = context;
          this.track = track;
          this.options = context.options;
          this.cache = context.cacheProvider.addCollection(this.options.host + "/" + this.options.host);

          /* Every 1 min */
          this.connectTrigger = setInterval(this.connect, this.options.pollInterval);

          /* Trigger at start */
          this.connect();
        }

        GoogleNewsStream.prototype.connect = function() {
          var args, feed, feedParser;
          feedParser = new FeedParser();
          feedParser.on('readable', (function(_this) {
            return function() {
              var existingItems, item, results;
              results = [];
              while ((item = feedParser.read())) {
                item.guid = _this.generateGuid(item.guid);
                existingItems = _this.cache.find({
                  guid: item.guid
                });
                if (existingItems.length === 0) {
                  _this.cache.insert(item);
                  results.push(_this.onData(item));
                } else {
                  results.push(void 0);
                }
              }
              return results;
            };
          })(this));
          feedParser.on('error', (function(_this) {
            return function(error) {
              return _this.onError(error);
            };
          })(this));
          args = {
            qs: extend({}, this.options.params, {
              q: this.track
            }),
            uri: this.options.protocol + "://" + this.options.host + "/" + this.options.service
          };
          feed = request(args);
          return feed.on('response', (function(_this) {
            return function() {
              return feed.pipe(feedParser);
            };
          })(this));
        };

        GoogleNewsStream.prototype.disconnect = function() {
          return clearInterval(this.checkTrigger);
        };

        GoogleNewsStream.prototype.onData = function(data) {
          return this.emit(GoogleNews.DATA, data);
        };

        GoogleNewsStream.prototype.onError = function(error) {
          return this.emit(GoogleNews.ERROR, error);
        };

        GoogleNewsStream.prototype.generateGuid = function(uri) {
          var guid;
          guid = this.context.urlHash.hash(uri);
          return guid;
        };

        return GoogleNewsStream;

      })();
      stream = new GoogleNewsStream(this, track);
      callback(stream);
    };

    return GoogleNews;

  })();

  module.exports = GoogleNews;

}).call(this);

//# sourceMappingURL=index.js.map
